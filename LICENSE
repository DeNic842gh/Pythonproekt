main_window_layout.py 
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication,QSpinBox,QVBoxLayout ,
                             QHBoxLayout , QLabel ,  QWidget, QRadioButton,
                             QButtonGroup,QGroupBox, QPushButton)
from  memo_app import app
app = QApplication([])
main_win = QWidget()
main_win.setWindowTitle('Memory card')
main_win.resize(400,400)


qtext = QLabel('Питання')
v_line = QVBoxLayout()
rbtn1 = QRadioButton('')
rbtn2 = QRadioButton('')
rbtn3 = QRadioButton('')
rbtn4 = QRadioButton('')
RadioGroupBox = QGroupBox('Варіанти відповідей')
RadioGroup = QButtonGroup()
RadioGroup.addButton(rbtn1)
RadioGroup.addButton(rbtn2)
RadioGroup.addButton(rbtn3)
RadioGroup.addButton(rbtn4)

layout_ans1 = QHBoxLayout()
layout_ans2 = QVBoxLayout()
layout_ans3 = QVBoxLayout()


layout_ans2.addWidget(rbtn1)
layout_ans2.addWidget(rbtn2)
layout_ans3.addWidget(rbtn3)
layout_ans3.addWidget(rbtn4)

layout_ans1.addLayout(layout_ans2)
layout_ans1.addLayout(layout_ans3)
RadioGroupBox.setLayout(layout_ans1)

btn_menu = QPushButton('Меню')
btn_sleep = QPushButton('Відпочити')
box_Minutes = QSpinBox()
box_Minutes.setValue(30)
btn_OK=QPushButton('Відповісти')

layout_line1 = QHBoxLayout()
layout_line2 = QHBoxLayout()
layout_line3 = QHBoxLayout()
layout_line4 = QHBoxLayout()

layout_line1.addWidget(btn_menu)
layout_line1.addWidget(btn_sleep)
layout_line1.addWidget(box_Minutes)
layout_line2.addWidget(qtext,alignment=Qt.AlignHCenter | Qt.AlignVCenter)
layout_line3.addWidget(RadioGroupBox)
layout_line4.addWidget(btn_OK,alignment=Qt.AlignCenter)

layout_card = QVBoxLayout()
layout_card.addLayout(layout_line1)
layout_card.addLayout(layout_line2)
layout_card.addLayout(layout_line3)
layout_card.addLayout(layout_line4)


def show_result():
    RadioGroupBox.hide()
    btn_OK.setText('Наступне питання')

def show_question():
    RadioGroupBox.show()
    btn_OK.setText('Відповісти')
    rbtn_1.setChecked(False)
    rbtn_2.setChecked(False)
    rbtn_3.setChecked(False)
    rbtn_4.setChecked(False)
    RadioGroup.setExclusiv
main_data.py
from PyQt5.QtCore import QAbstractListModel, QModelIndex, Qt
from random import randint,shuffle

class Question():
    def __init__(self,question, answer, wrong_answer1,wrong_answer2, wrong_answer3):
        self.question = question
        self.answer = answer
        self.wrong_answer1 = wrong_answer1
        self.wrong_answer2 = wrong_answer2
        self.wrong_answer3 = wrong_answer3
        self.is_active = True
        self.attemps = 0
        self.correct = 0
    def got_right(self):
        self.attemps += 1
        self.correct += 1

    def got_wrong(self):
        self.attemps += 1


class QuestionView():
    def __init__(self,frm_model, question, answer,wrong_answer1,wrong_answer2,wrong_answer3):
        self.frm_model = frm_model
        self.question = question
        self.answer = answer
        self.answer = answer
        self.wrong_answer1 = wrong_answer1
        self.wrong_answer2 = wrong_answer2
        self.wrong_answer3 = wrong_answer3

    def change(self,frm_model):
        self.frm_model = frm_model
    def show(self):
        self.question.setText(self.frm_model.question)
        self.answer.setText(self.frm_model.answer)
        self.wrong_answer1.setText(self.frm_model.wrong_answer1)
        self.wrong_answer2.setText(self.frm_model.wrong_answer2)
        self.wrong_answer3.setText(self.frm_model.wrong_answer3)


class QuestionEdit(QuestionView):
    def save_question(self):
        self.frm_model.question = self.question.text()
    def save_answer(self):
        self.frm_model.answer = self.answer.text()
    def save_wrong(self):
        self.frm_model.wrong_answer1 = self.wrong_answer1.text()
        self.frm_model.wrong_answer2 = self.wrong_answer2.text()
        self.frm_model.wrong_answer3 = self.wrong_answer3.text()
    def set_connects(self):
        self.question.editingFinished.connect(self.save_question)
        self.answer.editingFinished.connect(self.save_answer)
        self.wrong_answer1.editingFinished.connect(self.save_wrong)
        self.wrong_answer2.editingFinished.connect(self.save_wrong)
        self.wrong_answer3.editingFinished.connect(self.save_wrong)

    def __init__(self, frm_model, question, answer,wrong_answer1,wrong_answer2,wrong_answer3):
        QuestionView.__init__(self, frm_model=frm_model, question=question, answer= answer, wrong_answer1=wrong_answer1, wrong_answer2=wrong_answer2, wrong_answer3=wrong_answer3)


class AnswerCheck(QuestionView):
    def __init__(self, frm_model, question, answer,showed_answer, result, wrong_answer1, wrong_answer2, wrong_answer3):
        QuestionView.__init__(self, frm_model=frm_model, question=question, answer=answer,
                              wrong_answer1=wrong_answer1,wrong_answer2=wrong_answer2,
                              wrong_answer3=wrong_answer3)
        self.showed_answer = showed_answer
        self.result = result

class QuestionListModel(QAbstractListModel):
    def __init__(self, parent=None):
        QAbstractListModel.__init__(self,parent)
        self.form_list=[]

    def rowCount(self,index):
        return len(self.form_list)

    def data(self, index, role):
        if role == Qt.DisplayRole:
            form = self.form_list[index_row()]
            return form.question

        def insertRows(self, parent=QModelIndex()):
            position = len(self.from_list)
            self.beginInsertRows(parent,position,position)
            self.from_list.append(position)
            self.endInsertRown()
            return True

        def removeRows(self,position, perent=QModelIndex())
            self.beginInsertRows(parent, position, position)
            self.from_list.append(position)
            self.endInsertRown()
            return True

        def random_qustion(self, from_list):
            totel = len(self )
            current = randint(0 ,total-1)
            return self.from_list[current]

def randow_AnswerCheck(list_model,w_question,wiget_list,w_showed_answer,w_result):
    frm =list_model.random_question()
    shuffle(wiget_list)
    frm_card=AnswerCheck(frm,w_question,wiget_list[0],wiget_list[1],wiget_list[2],wiget_list[3],w_showed_answer,w_result)
    return frm_card

memo.app.py
from PyQt5.QtWidgets import QApplistion

app = QApplistion([])
menu_window_layout.py 
from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import (QApplication,QSpinBox,QVBoxLayout ,
                             QHBoxLayout , QLabel ,  QWidget, QRadioButton,
                             QButtonGroup,QGroupBox, QPushButton,QLineEdit)
app = QApplication([])
main_win = QWidget()
main_win.setWindowTitle('Memory card')
main_win.resize(400,400)

question_label = QLabel('Введіть запитання')
correct_answer_label = QLabel('Введіть правильну відповідь')
answer1_label = QLabel('Введіть першу хибну відповідь')
answer2_label = QLabel('Введіть  другу хибну відповідь')
answer3_label = QLabel('Введіть третю хибну відповідь')
btn_add=QPushButton('Додати запитання')
btn_clean = QPushButton('Очистити')


question = QLineEdit()
correct_answer = QLineEdit()
answer1 = QLineEdit()
answer2 = QLineEdit()
answer3 = QLineEdit()




line1 = QHBoxLayout()
line2 = QHBoxLayout()
line3 = QHBoxLayout()
line4 = QHBoxLayout()
line5 = QHBoxLayout()

line6 = QHBoxLayout()
line6.addWidget(btn_add)
line6.addWidget(btn_clean)

line1.addWidget(question_label)
line1.addWidget(question)

line2.addWidget(correct_answer_label)
line2.addWidget(correct_answer)

line3.addWidget(answer1_label)
line3.addWidget(answer1)

line4.addWidget(answer2_label)
line4.addWidget(answer2)

line5.addWidget(answer3_label)
line5.addWidget(answer3)

edit_layout = QVBoxLayout()
edit_layout.addLayout(line1)
edit_layout.addLayout(line2)
edit_layout.addLayout(line3)
edit_layout.addLayout(line4)
edit_layout.addLayout(line5)
edit_layout.addLayout(line6)

statistics = QLabel('Статистика')

amount_atempt = QLabel('Разів відповіли:')
amount_correct = QLabel('Вірних відповідей:')
sucssesful = QLabel('Успішність:')
stat_line =  QVBoxLayout()
stat_line.addWidget(statistics,alignment=Qt.AlignLeft)
stat_line.addWidget(amount_atempt,alignment=Qt.AlignLeft)
stat_line.addWidget(amount_correct,alignment=Qt.AlignLeft)
stat_line.addWidget(sucssesful,alignment=Qt.AlignLeft)

edit_layout.addLayout(stat_line)

btn_back = QPushButton('Назад')
line7 = QHBoxLayout()
line7.addWidget(btn_back)
edit_layout.addLayout(line7)


main_win.setLayout(edit_layout)
main_win.show()
app.exec_()
